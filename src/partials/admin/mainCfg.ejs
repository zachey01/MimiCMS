<div class="container-sm">
	<div
		id="messageAlertWrapper"
		class="alert alert-primary d-inline-flex"
		role="alert"
	>
		<div id="messageAlertText">Successful connection to the API!</div>
		<button
			type="button"
			class="btn-close"
			data-bs-dismiss="alert"
			aria-label="Close"
		></button>
	</div>
	<div id="DBcfg-wrapper"></div>
	<button type="button" class="btn btn-outline-primary" id="submit">
		Save changes
	</button>
</div>
<script>
	const DBcfg = document.getElementById('DBcfg-wrapper');

	JSONEditor.defaults.options.theme = 'bootstrap5';
	JSONEditor.defaults.options.disable_edit_json = 'true';
	JSONEditor.defaults.options.disable_properties = 'true';
	JSONEditor.defaults.options.disable_collapse = 'true';
	const logoImg = document.getElementById('DBcfg-wrapper');
	logoImg.innerHTML =
		'Logo: <img src="<%- cfg.Logo.img %>" alt="" width="25" height="25">';

	const editor = new JSONEditor(DBcfg, {
		schema: {
			type: 'object',
			title: 'Main configuration',
			properties: {
				Name: {
					type: 'string',
					default: '<%- cfg.Name %>'
				},
				Logo: {
					type: 'object',
					properties: {
						img: {
							type: 'string',
							title: 'file',
							media: {
								binaryEncoding: 'base64',
								type: 'img/png'
							}
						}
					}
				},
				Currency: {
					type: 'string',
					default: '<%- cfg.Currency %>'
				},
				SteamWebAPIkey: {
					type: 'string',
					default: '<%- cfg.SteamWebAPIkey %>'
				}
			}
		}
	});

	const serverEditor = new JSONEditor(DBcfg, {
		schema: {
			type: 'object',
			title: 'Game server configuration',
			properties: {
				serverIP: {
					type: 'string',
					default: '<%- cfg.serverIP %>'
				},
				ServerPort: {
					type: 'number',
					default: '<%- cfg.ServerPort %>'
				},
				RCONport: {
					type: 'number',
					default: '<%- cfg.RCONport %>'
				},
				RCONpassword: {
					type: 'string',
					default: '<%- cfg.RCONpassword %>'
				}
			}
		}
	});

	const webEditor = new JSONEditor(DBcfg, {
		schema: {
			type: 'object',
			title: 'Web server configuration',
			properties: {
				Port: {
					type: 'number',
					default: '<%- cfg.Port %>',
					description:
						'if the port is 80, it will be like this: <%- cfg.domain %>'
				},
				Domain: {
					type: 'string',
					default: '<%- cfg.Domain %>'
				}
			}
		}
	});

	const DBeditor = new JSONEditor(DBcfg, {
		schema: {
			type: 'object',
			title: 'MYSQL database configuration',
			properties: {
				DB_HOST: {
					type: 'string',
					default: '<%- cfg.DB_HOST %>'
				},
				DB_USER: {
					type: 'string',
					default: '<%- cfg.DB_USER %>'
				},
				DB_PASSWORD: {
					type: 'string',
					default: '<%- cfg.DB_PASSWORD %>'
				},
				DB_NAME: {
					type: 'string',
					default: '<%- cfg.DB_NAME %>'
				}
			}
		}
	});

	fetch('/api/token')
		.then(response => response.json())
		.then(data => {
			const token = data.token;
			fetch('/api/protected', {
				headers: {
					Authorization: token
				}
			})
				.then(response => response.json())
				.then(data => {
					const alertText =
						document.getElementById('messageAlertText');

					const alertWrapper = document.getElementById(
						'messageAlertWrapper'
					);

					if (data.message === false || data.message === undefined) {
						alertText.innerHTML = `Error. Please, check connect to API.`;
						alertWrapper.classList.remove('alert-primary');
						alertWrapper.classList.add('alert-danger');
					}

					document
						.getElementById('submit')
						.addEventListener('click', function () {
							// Get the value from the editor
							let mergedValue = Object.assign(
								{},
								editor.getValue(),
								DBeditor.getValue(),
								webEditor.getValue(),
								serverEditor.getValue()
							);

							// Encrypt the value using AES encryption
							var encryptedValue = CryptoJS.AES.encrypt(
								JSON.stringify(mergedValue),
								'admin'
							).toString();

							// Send the encrypted value to the server using AJAX
							var xhr = new XMLHttpRequest();
							xhr.open('POST', '/submit');
							xhr.setRequestHeader(
								'Content-Type',
								'application/json'
							);
							xhr.onreadystatechange = function () {
								if (
									xhr.readyState === XMLHttpRequest.DONE &&
									xhr.status === 200
								) {
								}
							};
							xhr.send(
								JSON.stringify({
									encryptedValue: encryptedValue
								})
							);
						});
				})
				.catch(error => {
					console.error(error); // Обработка ошибки
				});
		})
		.catch(error => {
			console.error(error); // Обработка ошибки
		});
</script>
